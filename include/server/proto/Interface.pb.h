// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Interface.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Interface_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Interface_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Interface_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Interface_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Interface_2eproto;
namespace Ye_Interface {
class ChatMsg;
class ChatMsgDefaultTypeInternal;
extern ChatMsgDefaultTypeInternal _ChatMsg_default_instance_;
class GroupMsg;
class GroupMsgDefaultTypeInternal;
extern GroupMsgDefaultTypeInternal _GroupMsg_default_instance_;
class InterfaceRequest;
class InterfaceRequestDefaultTypeInternal;
extern InterfaceRequestDefaultTypeInternal _InterfaceRequest_default_instance_;
class InterfaceResponse;
class InterfaceResponseDefaultTypeInternal;
extern InterfaceResponseDefaultTypeInternal _InterfaceResponse_default_instance_;
}  // namespace Ye_Interface
PROTOBUF_NAMESPACE_OPEN
template<> ::Ye_Interface::ChatMsg* Arena::CreateMaybeMessage<::Ye_Interface::ChatMsg>(Arena*);
template<> ::Ye_Interface::GroupMsg* Arena::CreateMaybeMessage<::Ye_Interface::GroupMsg>(Arena*);
template<> ::Ye_Interface::InterfaceRequest* Arena::CreateMaybeMessage<::Ye_Interface::InterfaceRequest>(Arena*);
template<> ::Ye_Interface::InterfaceResponse* Arena::CreateMaybeMessage<::Ye_Interface::InterfaceResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Ye_Interface {

// ===================================================================

class InterfaceRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Ye_Interface.InterfaceRequest) */ {
 public:
  InterfaceRequest();
  virtual ~InterfaceRequest();

  InterfaceRequest(const InterfaceRequest& from);
  InterfaceRequest(InterfaceRequest&& from) noexcept
    : InterfaceRequest() {
    *this = ::std::move(from);
  }

  inline InterfaceRequest& operator=(const InterfaceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InterfaceRequest& operator=(InterfaceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InterfaceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InterfaceRequest* internal_default_instance() {
    return reinterpret_cast<const InterfaceRequest*>(
               &_InterfaceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InterfaceRequest& a, InterfaceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InterfaceRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InterfaceRequest* New() const final {
    return CreateMaybeMessage<InterfaceRequest>(nullptr);
  }

  InterfaceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InterfaceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InterfaceRequest& from);
  void MergeFrom(const InterfaceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InterfaceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Ye_Interface.InterfaceRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Interface_2eproto);
    return ::descriptor_table_Interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kRequestMsgFieldNumber = 2,
  };
  // bytes type = 1;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const void* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // bytes request_msg = 2;
  void clear_request_msg();
  const std::string& request_msg() const;
  void set_request_msg(const std::string& value);
  void set_request_msg(std::string&& value);
  void set_request_msg(const char* value);
  void set_request_msg(const void* value, size_t size);
  std::string* mutable_request_msg();
  std::string* release_request_msg();
  void set_allocated_request_msg(std::string* request_msg);
  private:
  const std::string& _internal_request_msg() const;
  void _internal_set_request_msg(const std::string& value);
  std::string* _internal_mutable_request_msg();
  public:

  // @@protoc_insertion_point(class_scope:Ye_Interface.InterfaceRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Interface_2eproto;
};
// -------------------------------------------------------------------

class InterfaceResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Ye_Interface.InterfaceResponse) */ {
 public:
  InterfaceResponse();
  virtual ~InterfaceResponse();

  InterfaceResponse(const InterfaceResponse& from);
  InterfaceResponse(InterfaceResponse&& from) noexcept
    : InterfaceResponse() {
    *this = ::std::move(from);
  }

  inline InterfaceResponse& operator=(const InterfaceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InterfaceResponse& operator=(InterfaceResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InterfaceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InterfaceResponse* internal_default_instance() {
    return reinterpret_cast<const InterfaceResponse*>(
               &_InterfaceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InterfaceResponse& a, InterfaceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InterfaceResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InterfaceResponse* New() const final {
    return CreateMaybeMessage<InterfaceResponse>(nullptr);
  }

  InterfaceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InterfaceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InterfaceResponse& from);
  void MergeFrom(const InterfaceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InterfaceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Ye_Interface.InterfaceResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Interface_2eproto);
    return ::descriptor_table_Interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kResponseMsgFieldNumber = 2,
  };
  // bytes type = 1;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const void* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // bytes response_msg = 2;
  void clear_response_msg();
  const std::string& response_msg() const;
  void set_response_msg(const std::string& value);
  void set_response_msg(std::string&& value);
  void set_response_msg(const char* value);
  void set_response_msg(const void* value, size_t size);
  std::string* mutable_response_msg();
  std::string* release_response_msg();
  void set_allocated_response_msg(std::string* response_msg);
  private:
  const std::string& _internal_response_msg() const;
  void _internal_set_response_msg(const std::string& value);
  std::string* _internal_mutable_response_msg();
  public:

  // @@protoc_insertion_point(class_scope:Ye_Interface.InterfaceResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Interface_2eproto;
};
// -------------------------------------------------------------------

class ChatMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Ye_Interface.ChatMsg) */ {
 public:
  ChatMsg();
  virtual ~ChatMsg();

  ChatMsg(const ChatMsg& from);
  ChatMsg(ChatMsg&& from) noexcept
    : ChatMsg() {
    *this = ::std::move(from);
  }

  inline ChatMsg& operator=(const ChatMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatMsg& operator=(ChatMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChatMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatMsg* internal_default_instance() {
    return reinterpret_cast<const ChatMsg*>(
               &_ChatMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ChatMsg& a, ChatMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(ChatMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChatMsg* New() const final {
    return CreateMaybeMessage<ChatMsg>(nullptr);
  }

  ChatMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChatMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChatMsg& from);
  void MergeFrom(const ChatMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Ye_Interface.ChatMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Interface_2eproto);
    return ::descriptor_table_Interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 3,
    kTimeFieldNumber = 4,
    kUserNameFieldNumber = 5,
    kToUserIdFieldNumber = 1,
    kFromUserIdFieldNumber = 2,
  };
  // bytes msg = 3;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // bytes time = 4;
  void clear_time();
  const std::string& time() const;
  void set_time(const std::string& value);
  void set_time(std::string&& value);
  void set_time(const char* value);
  void set_time(const void* value, size_t size);
  std::string* mutable_time();
  std::string* release_time();
  void set_allocated_time(std::string* time);
  private:
  const std::string& _internal_time() const;
  void _internal_set_time(const std::string& value);
  std::string* _internal_mutable_time();
  public:

  // bytes user_name = 5;
  void clear_user_name();
  const std::string& user_name() const;
  void set_user_name(const std::string& value);
  void set_user_name(std::string&& value);
  void set_user_name(const char* value);
  void set_user_name(const void* value, size_t size);
  std::string* mutable_user_name();
  std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // int32 to_user_id = 1;
  void clear_to_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 to_user_id() const;
  void set_to_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_to_user_id() const;
  void _internal_set_to_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 from_user_id = 2;
  void clear_from_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 from_user_id() const;
  void set_from_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_from_user_id() const;
  void _internal_set_from_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Ye_Interface.ChatMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 to_user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 from_user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Interface_2eproto;
};
// -------------------------------------------------------------------

class GroupMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Ye_Interface.GroupMsg) */ {
 public:
  GroupMsg();
  virtual ~GroupMsg();

  GroupMsg(const GroupMsg& from);
  GroupMsg(GroupMsg&& from) noexcept
    : GroupMsg() {
    *this = ::std::move(from);
  }

  inline GroupMsg& operator=(const GroupMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupMsg& operator=(GroupMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GroupMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroupMsg* internal_default_instance() {
    return reinterpret_cast<const GroupMsg*>(
               &_GroupMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GroupMsg& a, GroupMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupMsg* New() const final {
    return CreateMaybeMessage<GroupMsg>(nullptr);
  }

  GroupMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupMsg& from);
  void MergeFrom(const GroupMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Ye_Interface.GroupMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Interface_2eproto);
    return ::descriptor_table_Interface_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 3,
    kMsgFieldNumber = 4,
    kTimeFieldNumber = 5,
    kGroupIdFieldNumber = 1,
    kFromUserIdFieldNumber = 2,
  };
  // bytes user_name = 3;
  void clear_user_name();
  const std::string& user_name() const;
  void set_user_name(const std::string& value);
  void set_user_name(std::string&& value);
  void set_user_name(const char* value);
  void set_user_name(const void* value, size_t size);
  std::string* mutable_user_name();
  std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // bytes msg = 4;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // bytes time = 5;
  void clear_time();
  const std::string& time() const;
  void set_time(const std::string& value);
  void set_time(std::string&& value);
  void set_time(const char* value);
  void set_time(const void* value, size_t size);
  std::string* mutable_time();
  std::string* release_time();
  void set_allocated_time(std::string* time);
  private:
  const std::string& _internal_time() const;
  void _internal_set_time(const std::string& value);
  std::string* _internal_mutable_time();
  public:

  // int32 group_id = 1;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::int32 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_group_id() const;
  void _internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 from_user_id = 2;
  void clear_from_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 from_user_id() const;
  void set_from_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_from_user_id() const;
  void _internal_set_from_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Ye_Interface.GroupMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_;
  ::PROTOBUF_NAMESPACE_ID::int32 group_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 from_user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Interface_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InterfaceRequest

// bytes type = 1;
inline void InterfaceRequest::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InterfaceRequest::type() const {
  // @@protoc_insertion_point(field_get:Ye_Interface.InterfaceRequest.type)
  return _internal_type();
}
inline void InterfaceRequest::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Ye_Interface.InterfaceRequest.type)
}
inline std::string* InterfaceRequest::mutable_type() {
  // @@protoc_insertion_point(field_mutable:Ye_Interface.InterfaceRequest.type)
  return _internal_mutable_type();
}
inline const std::string& InterfaceRequest::_internal_type() const {
  return type_.GetNoArena();
}
inline void InterfaceRequest::_internal_set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InterfaceRequest::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Ye_Interface.InterfaceRequest.type)
}
inline void InterfaceRequest::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Ye_Interface.InterfaceRequest.type)
}
inline void InterfaceRequest::set_type(const void* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Ye_Interface.InterfaceRequest.type)
}
inline std::string* InterfaceRequest::_internal_mutable_type() {
  
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InterfaceRequest::release_type() {
  // @@protoc_insertion_point(field_release:Ye_Interface.InterfaceRequest.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InterfaceRequest::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:Ye_Interface.InterfaceRequest.type)
}

// bytes request_msg = 2;
inline void InterfaceRequest::clear_request_msg() {
  request_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InterfaceRequest::request_msg() const {
  // @@protoc_insertion_point(field_get:Ye_Interface.InterfaceRequest.request_msg)
  return _internal_request_msg();
}
inline void InterfaceRequest::set_request_msg(const std::string& value) {
  _internal_set_request_msg(value);
  // @@protoc_insertion_point(field_set:Ye_Interface.InterfaceRequest.request_msg)
}
inline std::string* InterfaceRequest::mutable_request_msg() {
  // @@protoc_insertion_point(field_mutable:Ye_Interface.InterfaceRequest.request_msg)
  return _internal_mutable_request_msg();
}
inline const std::string& InterfaceRequest::_internal_request_msg() const {
  return request_msg_.GetNoArena();
}
inline void InterfaceRequest::_internal_set_request_msg(const std::string& value) {
  
  request_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InterfaceRequest::set_request_msg(std::string&& value) {
  
  request_msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Ye_Interface.InterfaceRequest.request_msg)
}
inline void InterfaceRequest::set_request_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Ye_Interface.InterfaceRequest.request_msg)
}
inline void InterfaceRequest::set_request_msg(const void* value, size_t size) {
  
  request_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Ye_Interface.InterfaceRequest.request_msg)
}
inline std::string* InterfaceRequest::_internal_mutable_request_msg() {
  
  return request_msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InterfaceRequest::release_request_msg() {
  // @@protoc_insertion_point(field_release:Ye_Interface.InterfaceRequest.request_msg)
  
  return request_msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InterfaceRequest::set_allocated_request_msg(std::string* request_msg) {
  if (request_msg != nullptr) {
    
  } else {
    
  }
  request_msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_msg);
  // @@protoc_insertion_point(field_set_allocated:Ye_Interface.InterfaceRequest.request_msg)
}

// -------------------------------------------------------------------

// InterfaceResponse

// bytes type = 1;
inline void InterfaceResponse::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InterfaceResponse::type() const {
  // @@protoc_insertion_point(field_get:Ye_Interface.InterfaceResponse.type)
  return _internal_type();
}
inline void InterfaceResponse::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Ye_Interface.InterfaceResponse.type)
}
inline std::string* InterfaceResponse::mutable_type() {
  // @@protoc_insertion_point(field_mutable:Ye_Interface.InterfaceResponse.type)
  return _internal_mutable_type();
}
inline const std::string& InterfaceResponse::_internal_type() const {
  return type_.GetNoArena();
}
inline void InterfaceResponse::_internal_set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InterfaceResponse::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Ye_Interface.InterfaceResponse.type)
}
inline void InterfaceResponse::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Ye_Interface.InterfaceResponse.type)
}
inline void InterfaceResponse::set_type(const void* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Ye_Interface.InterfaceResponse.type)
}
inline std::string* InterfaceResponse::_internal_mutable_type() {
  
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InterfaceResponse::release_type() {
  // @@protoc_insertion_point(field_release:Ye_Interface.InterfaceResponse.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InterfaceResponse::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:Ye_Interface.InterfaceResponse.type)
}

// bytes response_msg = 2;
inline void InterfaceResponse::clear_response_msg() {
  response_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InterfaceResponse::response_msg() const {
  // @@protoc_insertion_point(field_get:Ye_Interface.InterfaceResponse.response_msg)
  return _internal_response_msg();
}
inline void InterfaceResponse::set_response_msg(const std::string& value) {
  _internal_set_response_msg(value);
  // @@protoc_insertion_point(field_set:Ye_Interface.InterfaceResponse.response_msg)
}
inline std::string* InterfaceResponse::mutable_response_msg() {
  // @@protoc_insertion_point(field_mutable:Ye_Interface.InterfaceResponse.response_msg)
  return _internal_mutable_response_msg();
}
inline const std::string& InterfaceResponse::_internal_response_msg() const {
  return response_msg_.GetNoArena();
}
inline void InterfaceResponse::_internal_set_response_msg(const std::string& value) {
  
  response_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InterfaceResponse::set_response_msg(std::string&& value) {
  
  response_msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Ye_Interface.InterfaceResponse.response_msg)
}
inline void InterfaceResponse::set_response_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  response_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Ye_Interface.InterfaceResponse.response_msg)
}
inline void InterfaceResponse::set_response_msg(const void* value, size_t size) {
  
  response_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Ye_Interface.InterfaceResponse.response_msg)
}
inline std::string* InterfaceResponse::_internal_mutable_response_msg() {
  
  return response_msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InterfaceResponse::release_response_msg() {
  // @@protoc_insertion_point(field_release:Ye_Interface.InterfaceResponse.response_msg)
  
  return response_msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InterfaceResponse::set_allocated_response_msg(std::string* response_msg) {
  if (response_msg != nullptr) {
    
  } else {
    
  }
  response_msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), response_msg);
  // @@protoc_insertion_point(field_set_allocated:Ye_Interface.InterfaceResponse.response_msg)
}

// -------------------------------------------------------------------

// ChatMsg

// int32 to_user_id = 1;
inline void ChatMsg::clear_to_user_id() {
  to_user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChatMsg::_internal_to_user_id() const {
  return to_user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChatMsg::to_user_id() const {
  // @@protoc_insertion_point(field_get:Ye_Interface.ChatMsg.to_user_id)
  return _internal_to_user_id();
}
inline void ChatMsg::_internal_set_to_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  to_user_id_ = value;
}
inline void ChatMsg::set_to_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_to_user_id(value);
  // @@protoc_insertion_point(field_set:Ye_Interface.ChatMsg.to_user_id)
}

// int32 from_user_id = 2;
inline void ChatMsg::clear_from_user_id() {
  from_user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChatMsg::_internal_from_user_id() const {
  return from_user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChatMsg::from_user_id() const {
  // @@protoc_insertion_point(field_get:Ye_Interface.ChatMsg.from_user_id)
  return _internal_from_user_id();
}
inline void ChatMsg::_internal_set_from_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  from_user_id_ = value;
}
inline void ChatMsg::set_from_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_from_user_id(value);
  // @@protoc_insertion_point(field_set:Ye_Interface.ChatMsg.from_user_id)
}

// bytes msg = 3;
inline void ChatMsg::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ChatMsg::msg() const {
  // @@protoc_insertion_point(field_get:Ye_Interface.ChatMsg.msg)
  return _internal_msg();
}
inline void ChatMsg::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:Ye_Interface.ChatMsg.msg)
}
inline std::string* ChatMsg::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:Ye_Interface.ChatMsg.msg)
  return _internal_mutable_msg();
}
inline const std::string& ChatMsg::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void ChatMsg::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChatMsg::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Ye_Interface.ChatMsg.msg)
}
inline void ChatMsg::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Ye_Interface.ChatMsg.msg)
}
inline void ChatMsg::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Ye_Interface.ChatMsg.msg)
}
inline std::string* ChatMsg::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChatMsg::release_msg() {
  // @@protoc_insertion_point(field_release:Ye_Interface.ChatMsg.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMsg::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:Ye_Interface.ChatMsg.msg)
}

// bytes time = 4;
inline void ChatMsg::clear_time() {
  time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ChatMsg::time() const {
  // @@protoc_insertion_point(field_get:Ye_Interface.ChatMsg.time)
  return _internal_time();
}
inline void ChatMsg::set_time(const std::string& value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:Ye_Interface.ChatMsg.time)
}
inline std::string* ChatMsg::mutable_time() {
  // @@protoc_insertion_point(field_mutable:Ye_Interface.ChatMsg.time)
  return _internal_mutable_time();
}
inline const std::string& ChatMsg::_internal_time() const {
  return time_.GetNoArena();
}
inline void ChatMsg::_internal_set_time(const std::string& value) {
  
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChatMsg::set_time(std::string&& value) {
  
  time_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Ye_Interface.ChatMsg.time)
}
inline void ChatMsg::set_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Ye_Interface.ChatMsg.time)
}
inline void ChatMsg::set_time(const void* value, size_t size) {
  
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Ye_Interface.ChatMsg.time)
}
inline std::string* ChatMsg::_internal_mutable_time() {
  
  return time_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChatMsg::release_time() {
  // @@protoc_insertion_point(field_release:Ye_Interface.ChatMsg.time)
  
  return time_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMsg::set_allocated_time(std::string* time) {
  if (time != nullptr) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:Ye_Interface.ChatMsg.time)
}

// bytes user_name = 5;
inline void ChatMsg::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ChatMsg::user_name() const {
  // @@protoc_insertion_point(field_get:Ye_Interface.ChatMsg.user_name)
  return _internal_user_name();
}
inline void ChatMsg::set_user_name(const std::string& value) {
  _internal_set_user_name(value);
  // @@protoc_insertion_point(field_set:Ye_Interface.ChatMsg.user_name)
}
inline std::string* ChatMsg::mutable_user_name() {
  // @@protoc_insertion_point(field_mutable:Ye_Interface.ChatMsg.user_name)
  return _internal_mutable_user_name();
}
inline const std::string& ChatMsg::_internal_user_name() const {
  return user_name_.GetNoArena();
}
inline void ChatMsg::_internal_set_user_name(const std::string& value) {
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChatMsg::set_user_name(std::string&& value) {
  
  user_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Ye_Interface.ChatMsg.user_name)
}
inline void ChatMsg::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Ye_Interface.ChatMsg.user_name)
}
inline void ChatMsg::set_user_name(const void* value, size_t size) {
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Ye_Interface.ChatMsg.user_name)
}
inline std::string* ChatMsg::_internal_mutable_user_name() {
  
  return user_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChatMsg::release_user_name() {
  // @@protoc_insertion_point(field_release:Ye_Interface.ChatMsg.user_name)
  
  return user_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMsg::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  user_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:Ye_Interface.ChatMsg.user_name)
}

// -------------------------------------------------------------------

// GroupMsg

// int32 group_id = 1;
inline void GroupMsg::clear_group_id() {
  group_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMsg::_internal_group_id() const {
  return group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMsg::group_id() const {
  // @@protoc_insertion_point(field_get:Ye_Interface.GroupMsg.group_id)
  return _internal_group_id();
}
inline void GroupMsg::_internal_set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  group_id_ = value;
}
inline void GroupMsg::set_group_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:Ye_Interface.GroupMsg.group_id)
}

// int32 from_user_id = 2;
inline void GroupMsg::clear_from_user_id() {
  from_user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMsg::_internal_from_user_id() const {
  return from_user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GroupMsg::from_user_id() const {
  // @@protoc_insertion_point(field_get:Ye_Interface.GroupMsg.from_user_id)
  return _internal_from_user_id();
}
inline void GroupMsg::_internal_set_from_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  from_user_id_ = value;
}
inline void GroupMsg::set_from_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_from_user_id(value);
  // @@protoc_insertion_point(field_set:Ye_Interface.GroupMsg.from_user_id)
}

// bytes user_name = 3;
inline void GroupMsg::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GroupMsg::user_name() const {
  // @@protoc_insertion_point(field_get:Ye_Interface.GroupMsg.user_name)
  return _internal_user_name();
}
inline void GroupMsg::set_user_name(const std::string& value) {
  _internal_set_user_name(value);
  // @@protoc_insertion_point(field_set:Ye_Interface.GroupMsg.user_name)
}
inline std::string* GroupMsg::mutable_user_name() {
  // @@protoc_insertion_point(field_mutable:Ye_Interface.GroupMsg.user_name)
  return _internal_mutable_user_name();
}
inline const std::string& GroupMsg::_internal_user_name() const {
  return user_name_.GetNoArena();
}
inline void GroupMsg::_internal_set_user_name(const std::string& value) {
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GroupMsg::set_user_name(std::string&& value) {
  
  user_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Ye_Interface.GroupMsg.user_name)
}
inline void GroupMsg::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Ye_Interface.GroupMsg.user_name)
}
inline void GroupMsg::set_user_name(const void* value, size_t size) {
  
  user_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Ye_Interface.GroupMsg.user_name)
}
inline std::string* GroupMsg::_internal_mutable_user_name() {
  
  return user_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GroupMsg::release_user_name() {
  // @@protoc_insertion_point(field_release:Ye_Interface.GroupMsg.user_name)
  
  return user_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GroupMsg::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  user_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:Ye_Interface.GroupMsg.user_name)
}

// bytes msg = 4;
inline void GroupMsg::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GroupMsg::msg() const {
  // @@protoc_insertion_point(field_get:Ye_Interface.GroupMsg.msg)
  return _internal_msg();
}
inline void GroupMsg::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:Ye_Interface.GroupMsg.msg)
}
inline std::string* GroupMsg::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:Ye_Interface.GroupMsg.msg)
  return _internal_mutable_msg();
}
inline const std::string& GroupMsg::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void GroupMsg::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GroupMsg::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Ye_Interface.GroupMsg.msg)
}
inline void GroupMsg::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Ye_Interface.GroupMsg.msg)
}
inline void GroupMsg::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Ye_Interface.GroupMsg.msg)
}
inline std::string* GroupMsg::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GroupMsg::release_msg() {
  // @@protoc_insertion_point(field_release:Ye_Interface.GroupMsg.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GroupMsg::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:Ye_Interface.GroupMsg.msg)
}

// bytes time = 5;
inline void GroupMsg::clear_time() {
  time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GroupMsg::time() const {
  // @@protoc_insertion_point(field_get:Ye_Interface.GroupMsg.time)
  return _internal_time();
}
inline void GroupMsg::set_time(const std::string& value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:Ye_Interface.GroupMsg.time)
}
inline std::string* GroupMsg::mutable_time() {
  // @@protoc_insertion_point(field_mutable:Ye_Interface.GroupMsg.time)
  return _internal_mutable_time();
}
inline const std::string& GroupMsg::_internal_time() const {
  return time_.GetNoArena();
}
inline void GroupMsg::_internal_set_time(const std::string& value) {
  
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GroupMsg::set_time(std::string&& value) {
  
  time_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Ye_Interface.GroupMsg.time)
}
inline void GroupMsg::set_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Ye_Interface.GroupMsg.time)
}
inline void GroupMsg::set_time(const void* value, size_t size) {
  
  time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Ye_Interface.GroupMsg.time)
}
inline std::string* GroupMsg::_internal_mutable_time() {
  
  return time_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GroupMsg::release_time() {
  // @@protoc_insertion_point(field_release:Ye_Interface.GroupMsg.time)
  
  return time_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GroupMsg::set_allocated_time(std::string* time) {
  if (time != nullptr) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:Ye_Interface.GroupMsg.time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Ye_Interface

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Interface_2eproto
